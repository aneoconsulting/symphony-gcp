"""
These types are used to define the structure of the MachineReturnRequest custom
resource in the GCP Symphony Operator.
"""

import datetime
from typing import Dict, List, Optional

from gcp_symphony_operator.api.v1.types.gcp_symphony_resource import Condition
from pydantic import BaseModel, Field, field_validator


class MachineReturnRequestSpec(BaseModel):
    """Specification for the MachineReturnRequest custom resource."""

    requestId: str = Field(
        ...,
        description=(
            "Unique ID generated by the client application for tracking"
            "this return request"
        ),
    )
    machineIds: List[str] = Field(
        default_factory=list,
        description=(
            "List of machine IDs (pod names) that the operator " "should delete."
        ),
    )
    labels: Optional[Dict[str, str]] = Field(
        default_factory=dict,
        description=(
            "Labels to add to the MachineReturnRequest custom resource. "
            "These labels can be used to filter and manage return requests."
        ),
    )


class MachineReturnRequestPhases(str):
    """Enumeration for the phases of a MachineReturnRequest."""

    PENDING = "Pending"
    IN_PROGRESS = "InProgress"
    COMPLETED = "Completed"
    FAILED = "Failed"


class MachineDetails(BaseModel):
    """Details of a machine's (pod's) return lifecycle."""

    machineId: str = Field(..., description="ID of the machine (pod) being returned.")
    returnRequestTime: datetime.datetime = Field(
        default_factory=lambda: datetime.datetime.now(datetime.timezone.utc),
        description="Timestamp when the return request was made.",
        json_schema_extra={"format": "date-time"},
    )
    returnCompletionTime: Optional[datetime.datetime] = Field(
        default=None,
        description="Timestamp when the return process was completed.",
        json_schema_extra={"format": "date-time"},
    )
    status: str = Field(
        default=MachineReturnRequestPhases.PENDING,
        description="Current status of the machine return process.",
    )
    message: Optional[str] = Field(
        default=None,
        description="Optional message providing additional information about the return process.",
    )

    @field_validator("returnRequestTime", "returnCompletionTime")
    @classmethod
    def validate_timezone(cls, v: datetime.datetime):
        """
        Ensure that the returnRequestTime and
        returnCompletionTime include timezone information.
        """
        if v is not None and v.tzinfo is None:
            raise ValueError(
                "returnRequestTime and returnCompletionTime must "
                "include timezone information"
            )
        return v


class MachineReturnRequestStatus(BaseModel):
    """Status of the MachineReturnRequest custom resource."""

    phase: str = Field(
        default=MachineReturnRequestPhases.PENDING,
        description="Current phase of the return request.",
    )
    conditions: List[Condition] = Field(
        default_factory=list,
        description="List of conditions that provide additional information about the status.",
    )
    lastUpdateTime: datetime.datetime = Field(
        default_factory=lambda: datetime.datetime.now(datetime.timezone.utc),
        description="Timestamp of the last update to the status.",
        json_schema_extra={"format": "date-time"},
    )
    machineEvents: List[MachineDetails] = Field(
        default_factory=list,
        description=(
            "List of machine IDs (pod names) that are being processed in this return request."
        ),
    )
    returnedMachines: int = Field(
        default=0,
        description="Number of machines (pods) that have been successfully returned.",
    )
    failedMachines: int = Field(
        default=0,
        description="Number of machines (pods) that have failed to be returned.",
    )

    @field_validator("lastUpdateTime")
    @classmethod
    def validate_timezone(cls, v: datetime.datetime):
        """Ensure that the lastUpdateTime includes timezone information."""
        if v.tzinfo is None:
            raise ValueError("lastUpdateTime must include timezone information")
        return v
